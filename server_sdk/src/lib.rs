//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
pub struct ApplicationState {
    pub app_config: app::configuration::AppConfig,
    pub processor: biscotti::Processor,
    pub tera: tera::Tera,
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {
    #[error(transparent)]
    CompileTemplates(tera::Error),
}
pub async fn build_application_state(
    v0: app::configuration::AppConfig,
) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
    let v1 = app::template::compile_templates();
    let v2 = match v1 {
        Ok(ok) => ok,
        Err(v2) => {
            return {
                let v3 = crate::ApplicationStateError::CompileTemplates(v2);
                core::result::Result::Err(v3)
            };
        }
    };
    let v3 = app::configuration::AppConfig::cookie_config(&v0);
    let v4 = <pavex::cookie::Processor as core::convert::From<
        pavex::cookie::ProcessorConfig,
    >>::from(v3);
    let v5 = crate::ApplicationState {
        app_config: v0,
        processor: v4,
        tera: v2,
    };
    core::result::Result::Ok(v5)
}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::response::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/", 0u32).unwrap();
        router.insert("/api/ping", 1u32).unwrap();
        router.insert("/api/storage/create", 2u32).unwrap();
        router.insert("/static/{filename}", 3u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::response::Response {
        let (request_head, _) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_4::entrypoint(
                    &state.processor,
                    &request_head,
                    matched_route_template,
                    &allowed_methods,
                )
                .await;
        };
        let url_params: pavex::request::path::RawPathParams<'_, '_> = matched_route
            .params
            .into();
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/",
                        );
                        route_0::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &state.tera,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/",
                        );
                        route_4::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/ping",
                        );
                        route_2::entrypoint(
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/ping",
                        );
                        route_4::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            2u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/storage/create",
                        );
                        route_3::entrypoint(
                                &state.app_config,
                                &state.processor,
                                matched_route_template,
                                &request_head,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/api/storage/create",
                        );
                        route_4::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            3u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/static/{filename}",
                        );
                        route_1::entrypoint(
                                url_params,
                                &request_head,
                                matched_route_template,
                                &state.processor,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/static/{filename}",
                        );
                        route_4::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &allowed_methods,
                            )
                            .await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c tera::Tera,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a tera::Tera,
        s_2: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), s_1).await;
        let response = post_processing_1(response, &s_0, s_2).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b tera::Tera,
    ) -> pavex::response::Response {
        let response = handler(s_0, s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &tera::Tera,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v1, v2, v4);
        let v6 = crate::route_0::Next0 {
            s_0: v5,
            s_1: v3,
            s_2: v0,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &tera::Tera,
    ) -> pavex::response::Response {
        let v2 = crate::route_0::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tracing::RootSpan,
        v1: &tera::Tera,
    ) -> pavex::response::Response {
        let v2 = app::routes::index::get(v1);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::Error::new(v3);
                    let v5 = app::routes::index::tera_error2response(&v4);
                    app::telemetry::error_logger(&v4, v0).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a tera::Tera,
        s_2: &'b biscotti::Processor,
        next: fn(pavex_tracing::RootSpan, &'a tera::Tera, &'b biscotti::Processor) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b tera::Tera,
        next: fn(&'a pavex_tracing::RootSpan, &'b tera::Tera) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::RawPathParams<'a, 'b>,
        s_1: &'c pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'d biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c>(
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), s_1).await;
        let response = post_processing_1(response, &s_0, s_2).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
    ) -> pavex::response::Response {
        let response = handler(s_1, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v1, v2, v4);
        let v6 = crate::route_1::Next0 {
            s_0: v5,
            s_1: v0,
            s_2: v3,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: pavex::request::path::RawPathParams<'_, '_>,
    ) -> pavex::response::Response {
        let v2 = crate::route_1::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: pavex::request::path::RawPathParams<'_, '_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = pavex::request::path::PathParams::extract(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = pavex::request::path::errors::ExtractPathParamsError::into_response(
                        &v3,
                    );
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v4,
                    )
                };
            }
        };
        let v4 = app::asset::StaticAsset::build_static_asset(v3);
        let v5 = app::routes::static_assets::get(v4);
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'a, 'b>,
        s_2: &'c biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'a, 'b>,
            &'c biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::path::RawPathParams<'b, 'c>,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::path::RawPathParams<'b, 'c>,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a, 'b>(
        s_0: &'a pavex::request::RequestHead,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2).await;
        response
    }
    async fn stage_1<'a>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone()).await;
        let response = post_processing_1(response, &s_0, s_1).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::response::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::request::RequestHead,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::telemetry::ServerRequestId::generate();
        let v4 = app::telemetry::root_span(v0, v1, v3);
        let v5 = crate::route_2::Next0 {
            s_0: v4,
            s_1: v2,
            next: stage_1,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = pavex::middleware::wrap_noop(v6).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v7)
    }
    async fn wrapping_1(v0: pavex_tracing::RootSpan) -> pavex::response::Response {
        let v1 = crate::route_2::Next1 {
            s_0: &v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v4 = pavex_tracing::logger(v3, v2).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v4)
    }
    async fn handler() -> pavex::response::Response {
        let v0 = app::routes::ping::get();
        <http::StatusCode as pavex::response::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a biscotti::Processor,
        next: fn(pavex_tracing::RootSpan, &'a biscotti::Processor) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next0<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: &'a app::configuration::AppConfig,
        s_1: &'b biscotti::Processor,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b, 'c>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::request::RequestHead,
        s_2: &'b app::configuration::AppConfig,
        s_3: &'c biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), s_2, s_1).await;
        let response = post_processing_1(response, &s_0, s_3).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        s_2: &'c app::configuration::AppConfig,
    ) -> pavex::response::Response {
        let response = handler(s_1, s_0, s_2).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &app::configuration::AppConfig,
        v1: &biscotti::Processor,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v3, v2, v4);
        let v6 = crate::route_3::Next0 {
            s_0: v5,
            s_1: v3,
            s_2: v0,
            s_3: v1,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &app::configuration::AppConfig,
        v2: &pavex::request::RequestHead,
    ) -> pavex::response::Response {
        let v3 = crate::route_3::Next1 {
            s_0: &v0,
            s_1: v2,
            s_2: v1,
            next: stage_2,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v6 = pavex_tracing::logger(v5, v4).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn handler(
        v0: &pavex::request::RequestHead,
        v1: &pavex_tracing::RootSpan,
        v2: &app::configuration::AppConfig,
    ) -> pavex::response::Response {
        let v3 = pavex::request::query::QueryParams::extract(v0);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = pavex::request::query::errors::ExtractQueryParamsError::into_response(
                        &v4,
                    );
                    let v6 = pavex::Error::new(v4);
                    app::telemetry::error_logger(&v6, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v5,
                    )
                };
            }
        };
        let v5 = app::routes::storage_create::post(v2, &v4).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::Error::new(v6);
                    let v8 = app::routes::storage_create::storage_create2response(&v7)
                        .await;
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v8,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v6)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::request::RequestHead,
        s_2: &'b app::configuration::AppConfig,
        s_3: &'c biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            &'a pavex::request::RequestHead,
            &'b app::configuration::AppConfig,
            &'c biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next0<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::request::RequestHead,
        s_2: &'c app::configuration::AppConfig,
        next: fn(
            &'a pavex_tracing::RootSpan,
            &'b pavex::request::RequestHead,
            &'c app::configuration::AppConfig,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a, 'b, 'c>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::router::AllowedMethods,
        s_2: &'b biscotti::Processor,
    ) -> pavex::response::Response {
        let response = wrapping_1(s_0.clone(), s_1).await;
        let response = post_processing_1(response, &s_0, s_2).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v4 = pavex::telemetry::ServerRequestId::generate();
        let v5 = app::telemetry::root_span(v1, v2, v4);
        let v6 = crate::route_4::Next0 {
            s_0: v5,
            s_1: v3,
            s_2: v0,
            next: stage_1,
        };
        let v7 = pavex::middleware::Next::new(v6);
        let v8 = pavex::middleware::wrap_noop(v7).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v8)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex::router::AllowedMethods,
    ) -> pavex::response::Response {
        let v2 = crate::route_4::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::response::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::response::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::response::Response,
        v1: &pavex_tracing::RootSpan,
        v2: &biscotti::Processor,
    ) -> pavex::response::Response {
        let v3 = pavex::cookie::ResponseCookies::new();
        let v4 = pavex::cookie::inject_response_cookies(v0, v3, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v1).await;
                    <pavex::response::Response as pavex::response::IntoResponse>::into_response(
                        v6,
                    )
                };
            }
        };
        <pavex::response::Response as pavex::response::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::router::AllowedMethods,
        s_2: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            &'a pavex::router::AllowedMethods,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::router::AllowedMethods) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::response::Response>,
    {
        type Output = pavex::response::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
